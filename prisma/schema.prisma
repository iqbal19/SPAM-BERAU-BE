// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @default(uuid()) @id
  email         String?   @unique @db.VarChar(60)
  username      String    @unique @db.VarChar(40)
  nama          String    @db.VarChar(120)
  password      String
  status        Status    @default(AKTIF)
  role          Role      @default(ADMIN)  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
}

model Desa {
  id            BigInt      @default(autoincrement()) @id
  kecamatan_id  BigInt
  name          String
  description   String     
  is_delete     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())

  SpamCakupan   SpamCakupan[]
}

model Spam {
  id                  Int      @default(autoincrement()) @id
  lat                 Decimal
  long                Decimal
  nama                String
  alamat              String
  kapasitas           Decimal
  kapasitas_intake    Decimal?
  kapasitas_produksi  Decimal?
  sr                  Decimal
  pengelola           String
  riwayat_aktivitas   String      @db.Text()
  sumber_air          String?
  sumber_tenaga       String?
  deletedAt           DateTime?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @default(now())

  SpamCakupan         SpamCakupan[]
  fotoSpam            FotoSpam?
  rasioSpam           RasioSpam?
  spamTitik           SpamTitik?
  spamShp             SpmShp[]
}

model SpamCakupan {
  id                Int         @default(autoincrement()) @id
  spamId            Int
  desaId            BigInt
  spam              Spam        @relation(fields: [spamId], references:[id])
  desa              Desa        @relation(fields: [desaId], references:[id])
}

model SpamTitik {
  id                Int         @default(autoincrement()) @id
  spam              Spam?       @relation(fields: [spamId], references: [id])
  spamId            Int?        @unique
  lat_intake        Decimal
  long_intake       Decimal
  lat_wtp           Decimal
  long_wtp          Decimal
  lat_roservoir     Decimal
  long_roservoir    Decimal
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())
}

model RasioSpam {
  id                Int         @default(autoincrement()) @id
  spam              Spam?       @relation(fields: [spamId], references: [id])
  spamId            Int?        @unique
  terlayani         Int
  tidak_terlayani   Int
  total_laki_laki   Int
  total_peempuan    Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())
}

model FotoSpam {
  id                    Int      @default(autoincrement()) @id
  spam                  Spam?    @relation(fields: [spamId], references: [id])
  spamId                Int?     @unique
  foto_wtp              String?
  foto_intake           String?
  foto_roservoir        String?
  foto_rumah_dosing     String?
  foto_pompa_distibusi  String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @default(now())
}

model News {
  id                    Int         @default(autoincrement()) @id
  title                 String
  description           String      @db.Text
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @default(now())
}

model ShpFile {
  id                    Int         @default(autoincrement()) @id
  geojson               Json
  spmShp                SpmShp[]
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @default(now())
}

model SpmShp {
  id                    Int         @default(autoincrement()) @id
  spam                  Spam?       @relation(fields: [spamId], references: [id])
  spamId                Int?           
  shpFile               ShpFile?    @relation(fields: [shpFileId], references: [id])
  shpFileId             Int?         
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @default(now())
}

enum Status {
  AKTIF
  NON_AKTIF
}

enum Role {
  ADMIN_APLIKASI
  ADMIN
}